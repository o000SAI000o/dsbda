import pandas as pd

# Step 1: Load the dataset
# If you have iris.csv file locally, you can use pd.read_csv('iris.csv')
# But scikit-learn also has inbuilt Iris dataset
from sklearn.datasets import load_iris
iris = load_iris()

# Create a DataFrame
df = pd.DataFrame(iris.data, columns=iris.feature_names)
# Check the first few rows
print(df.head())

df['target'] = iris.target
# Check the first few rows
print(df.head())

# Step 2: Split into train and test sets
from sklearn.model_selection import train_test_split
X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Step 3: Train a Simple Naive Bayes classifier
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, y_train)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, shuffle=True)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

# Step 3: Train a Simple Naive Bayes classifier
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train, Y_train)
print(model)

Y_pred = model.predict(X_test)
print(model.score(X_test,Y_test))

# Step 4: Predict on the test set
y_pred = model.predict(X_test)

# Step 5: Compute Confusion Matrix
cm = confusion_matrix(Y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)

# Extract TP, FP, TN, FN manually
# Since Iris dataset is multi-class (3 classes: 0, 1, 2), we'll compute TP, FP, TN, FN for each class separately
for i in range(len(iris.target_names)):
    TP = cm[i, i]
    FP = cm[:, i].sum() - TP
    FN = cm[i, :].sum() - TP
    TN = cm.sum() - (TP + FP + FN)
    print(f"\nClass {i} ({iris.target_names[i]}):")
    print(f"True Positive (TP): {TP}")
    print(f"False Positive (FP): {FP}")
    print(f"False Negative (FN): {FN}")
    print(f"True Negative (TN): {TN}")

# Step 6: Calculate Accuracy, Error rate, Precision, Recall
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score
accuracy = accuracy_score(Y_test, y_pred)
error_rate = 1 - accuracy
precision = precision_score(Y_test, y_pred, average='macro')  # macro for multi-class
recall = recall_score(Y_test, y_pred, average='macro')

print("\nOverall Metrics:")
print(f"Accuracy: {accuracy:.4f}")
print(f"Error Rate: {error_rate:.4f}")
print(f"Precision: {precision:.4f}")
print(f"Recall: {recall:.4f}")

